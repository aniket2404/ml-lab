{"cells":[{"cellId":"fddbac38ac6c4528864b5d9836b2eab5","cell_type":"code","metadata":{"source_hash":"d884225d","execution_start":1760524909611,"execution_millis":4940,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"fddbac38ac6c4528864b5d9836b2eab5","deepnote_cell_type":"code"},"source":"!pip install ucimlrepo","block_group":"ce364e69da994880b061f8b4ef1e8233","execution_count":1,"outputs":[{"name":"stdout","text":"Collecting ucimlrepo\n  Downloading ucimlrepo-0.0.7-py3-none-any.whl (8.0 kB)\nRequirement already satisfied: certifi>=2020.12.5 in /root/venv/lib/python3.10/site-packages (from ucimlrepo) (2025.8.3)\nRequirement already satisfied: pandas>=1.0.0 in /root/venv/lib/python3.10/site-packages (from ucimlrepo) (2.1.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /root/venv/lib/python3.10/site-packages (from pandas>=1.0.0->ucimlrepo) (2.9.0.post0)\nRequirement already satisfied: tzdata>=2022.1 in /root/venv/lib/python3.10/site-packages (from pandas>=1.0.0->ucimlrepo) (2025.2)\nRequirement already satisfied: pytz>=2020.1 in /root/venv/lib/python3.10/site-packages (from pandas>=1.0.0->ucimlrepo) (2025.2)\nRequirement already satisfied: numpy<2,>=1.22.4 in /root/venv/lib/python3.10/site-packages (from pandas>=1.0.0->ucimlrepo) (1.25.2)\nRequirement already satisfied: six>=1.5 in /root/venv/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas>=1.0.0->ucimlrepo) (1.17.0)\nInstalling collected packages: ucimlrepo\nSuccessfully installed ucimlrepo-0.0.7\n\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m25.2\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}],"outputs_reference":"s3:deepnote-cell-outputs-production/c6e1b62e-0d71-4cc7-8efe-6da7d9fcb518","content_dependencies":null},{"cellId":"c86d46b52d614d1cac9d6b40b7284fc7","cell_type":"code","metadata":{"source_hash":"860b2112","execution_start":1760524914604,"execution_millis":0,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"c86d46b52d614d1cac9d6b40b7284fc7","deepnote_cell_type":"code"},"source":"from ucimlrepo import fetch_ucirepo","block_group":"b59d7e7a731f453ba174ef888955bf98","execution_count":2,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"4f3b633272ad469388df7b09cee1ea3a","cell_type":"code","metadata":{"source_hash":"eb1063c1","execution_start":1760524914666,"execution_millis":3278,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"4f3b633272ad469388df7b09cee1ea3a","deepnote_cell_type":"code"},"source":"import pandas as pd\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report\nfrom sklearn.tree import DecisionTreeClassifier as SklearnTree","block_group":"1f3e952427f2480b82efc8177e8d5c6d","execution_count":3,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"15cf66c464c74a29a62a2d4cb32d85db","cell_type":"code","metadata":{"source_hash":"a2ff7a27","execution_start":1760524918010,"execution_millis":1707,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"15cf66c464c74a29a62a2d4cb32d85db","deepnote_cell_type":"code"},"source":"adult = fetch_ucirepo(id=2)\nX = adult.data.features\ny = adult.data.targets ","block_group":"a9fd96e43a904a1cb2d4e01f0ce16918","execution_count":4,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"734e01ded3ab44738782106180069f80","cell_type":"code","metadata":{"source_hash":"5d91b63","execution_start":1760524919788,"execution_millis":0,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"734e01ded3ab44738782106180069f80","deepnote_cell_type":"code"},"source":"#Obejctive 1\ndata = pd.concat([X, y], axis=1).dropna()","block_group":"fa440278e323433eb8805e09ce4ddc9b","execution_count":5,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"c05264ef8d0b4e41838100fd43295ad7","cell_type":"code","metadata":{"source_hash":"228f532","execution_start":1760525483368,"execution_millis":0,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"c05264ef8d0b4e41838100fd43295ad7","deepnote_cell_type":"code"},"source":"print(data)","block_group":"d32b30ee50b1447aba28037c55d14a6b","execution_count":29,"outputs":[{"name":"stdout","text":"       age         workclass  fnlwgt  education  education-num  \\\n0       39         State-gov   77516  Bachelors             13   \n1       50  Self-emp-not-inc   83311  Bachelors             13   \n2       38           Private  215646    HS-grad              9   \n3       53           Private  234721       11th              7   \n4       28           Private  338409  Bachelors             13   \n...    ...               ...     ...        ...            ...   \n48836   33           Private  245211  Bachelors             13   \n48837   39           Private  215419  Bachelors             13   \n48839   38           Private  374983  Bachelors             13   \n48840   44           Private   83891  Bachelors             13   \n48841   35      Self-emp-inc  182148  Bachelors             13   \n\n           marital-status         occupation   relationship  \\\n0           Never-married       Adm-clerical  Not-in-family   \n1      Married-civ-spouse    Exec-managerial        Husband   \n2                Divorced  Handlers-cleaners  Not-in-family   \n3      Married-civ-spouse  Handlers-cleaners        Husband   \n4      Married-civ-spouse     Prof-specialty           Wife   \n...                   ...                ...            ...   \n48836       Never-married     Prof-specialty      Own-child   \n48837            Divorced     Prof-specialty  Not-in-family   \n48839  Married-civ-spouse     Prof-specialty        Husband   \n48840            Divorced       Adm-clerical      Own-child   \n48841  Married-civ-spouse    Exec-managerial        Husband   \n\n                     race     sex  capital-gain  capital-loss  hours-per-week  \\\n0                   White    Male          2174             0              40   \n1                   White    Male             0             0              13   \n2                   White    Male             0             0              40   \n3                   Black    Male             0             0              40   \n4                   Black  Female             0             0              40   \n...                   ...     ...           ...           ...             ...   \n48836               White    Male             0             0              40   \n48837               White  Female             0             0              36   \n48839               White    Male             0             0              50   \n48840  Asian-Pac-Islander    Male          5455             0              40   \n48841               White    Male             0             0              60   \n\n      native-country  income  \n0      United-States   <=50K  \n1      United-States   <=50K  \n2      United-States   <=50K  \n3      United-States   <=50K  \n4               Cuba   <=50K  \n...              ...     ...  \n48836  United-States  <=50K.  \n48837  United-States  <=50K.  \n48839  United-States  <=50K.  \n48840  United-States  <=50K.  \n48841  United-States   >50K.  \n\n[47621 rows x 15 columns]\n","output_type":"stream"}],"outputs_reference":"s3:deepnote-cell-outputs-production/d0439e0f-479f-49d1-8427-8eec00493aac","content_dependencies":null},{"cellId":"3d18507ccb974f97b8ac13d318b85c1c","cell_type":"code","metadata":{"scrolled":true,"source_hash":"6dba80ca","execution_start":1760524919974,"execution_millis":0,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"3d18507ccb974f97b8ac13d318b85c1c","deepnote_cell_type":"code"},"source":"X = data.drop(columns=y.columns)\ny = data[y.columns[0]]","block_group":"890bb79918e74f7fbc7aeb959c49d71f","execution_count":7,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"361b689fcbba4fb88b530feca9a38661","cell_type":"code","metadata":{"source_hash":"d20c26cb","execution_start":1760525427811,"execution_millis":59,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"361b689fcbba4fb88b530feca9a38661","deepnote_cell_type":"code"},"source":"print(X.describe())","block_group":"fea4d5e3af9e4af9ad567db797650839","execution_count":26,"outputs":[{"name":"stdout","text":"                age     workclass        fnlwgt     education  education-num  \\\ncount  47621.000000  47621.000000  4.762100e+04  47621.000000   47621.000000   \nmean      38.640684      3.946893  1.897271e+05     10.290040      10.090821   \nstd       13.558961      1.371859  1.055695e+05      3.856378       2.568320   \nmin       17.000000      0.000000  1.228500e+04      0.000000       1.000000   \n25%       28.000000      4.000000  1.175840e+05      9.000000       9.000000   \n50%       37.000000      4.000000  1.782820e+05     11.000000      10.000000   \n75%       48.000000      4.000000  2.377200e+05     12.000000      12.000000   \nmax       90.000000      8.000000  1.490400e+06     15.000000      16.000000   \n\n       marital-status    occupation  relationship          race           sex  \\\ncount    47621.000000  47621.000000  47621.000000  47621.000000  47621.000000   \nmean         2.606602      6.704395      1.432141      3.671489      0.670650   \nstd          1.505946      4.168429      1.601278      0.842198      0.469982   \nmin          0.000000      0.000000      0.000000      0.000000      0.000000   \n25%          2.000000      3.000000      0.000000      4.000000      0.000000   \n50%          2.000000      7.000000      1.000000      4.000000      1.000000   \n75%          4.000000     10.000000      3.000000      4.000000      1.000000   \nmax          6.000000     14.000000      5.000000      4.000000      1.000000   \n\n       capital-gain  capital-loss  hours-per-week  native-country  \ncount  47621.000000  47621.000000    47621.000000    47621.000000  \nmean    1091.137649     87.853489       40.600050       36.946284  \nstd     7487.228336    404.010612       12.260345        7.311473  \nmin        0.000000      0.000000        1.000000        0.000000  \n25%        0.000000      0.000000       40.000000       39.000000  \n50%        0.000000      0.000000       40.000000       39.000000  \n75%        0.000000      0.000000       45.000000       39.000000  \nmax    99999.000000   4356.000000       99.000000       41.000000  \n","output_type":"stream"}],"outputs_reference":"s3:deepnote-cell-outputs-production/a01b56bb-9673-47d9-9eec-d0e3f926f67b","content_dependencies":null},{"cellId":"a595d08f10284498924375ff02ab3157","cell_type":"code","metadata":{"source_hash":"9aef979","execution_start":1760524920114,"execution_millis":57,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"a595d08f10284498924375ff02ab3157","deepnote_cell_type":"code"},"source":"# Label encoding categorical features\nfor col in X.select_dtypes('object').columns:\n    le = LabelEncoder()\n    X[col] = le.fit_transform(X[col].astype(str))\n\n\nle_y = LabelEncoder()\ny = le_y.fit_transform(y)","block_group":"dd3411c7eb2947b292f9aaab10c694eb","execution_count":9,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"177fef6768754ebda8c396aa88c0d166","cell_type":"code","metadata":{"source_hash":"23b31049","execution_start":1760524920224,"execution_millis":21,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"177fef6768754ebda8c396aa88c0d166","deepnote_cell_type":"code"},"source":"X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\nX_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=0.25, stratify=y_temp, random_state=42)","block_group":"4a3ab7b8b02d4dff989f02555cb3efcf","execution_count":10,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"c2415be02aac4370806151ddbcab0d4c","cell_type":"code","metadata":{"source_hash":"64a08023","execution_start":1760524920316,"execution_millis":3,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"c2415be02aac4370806151ddbcab0d4c","deepnote_cell_type":"code"},"source":"print('Train:', X_train.shape, 'Val:', X_val.shape, 'Test:', X_test.shape)","block_group":"4fe22615e4ad4504966ac24ae8b7e835","execution_count":11,"outputs":[{"name":"stdout","text":"Train: (28572, 14) Val: (9524, 14) Test: (9525, 14)\n","output_type":"stream"}],"outputs_reference":"dbtable:cell_outputs/8feefd08-ec9e-4c1f-8543-8a83599d06db","content_dependencies":null},{"cellId":"2211f2e667bf46a39bcf975d128de3b2","cell_type":"code","metadata":{"source_hash":"69275021","execution_start":1760524920379,"execution_millis":0,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"2211f2e667bf46a39bcf975d128de3b2","deepnote_cell_type":"code"},"source":"#Objective 2 & 3\nclass Node:\n    def __init__(self, depth=0):\n        self.feature = None\n        self.threshold = None\n        self.left = None\n        self.right = None\n        self.is_leaf = False\n        self.label = None\n        self.depth = depth","block_group":"e9518cec22874f488213308aeb160f6f","execution_count":12,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"28f58017a8d74b558a37b883a414f9fc","cell_type":"code","metadata":{"source_hash":"1b8273c3","execution_start":1760524920425,"execution_millis":28,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"28f58017a8d74b558a37b883a414f9fc","deepnote_cell_type":"code"},"source":"class DecisionTreeScratch:\n    def __init__(self, criterion='gini', max_depth=None, min_samples_split=2):\n        self.criterion = criterion\n        self.max_depth = max_depth\n        self.min_samples_split = min_samples_split\n        self.root = None\n\n    def _gini(self, y):\n        probs = np.bincount(y) / len(y)\n        return 1 - np.sum(probs ** 2)\n\n    def _entropy(self, y):\n        probs = np.bincount(y) / len(y)\n        return -np.sum([p * np.log2(p) for p in probs if p > 0])\n\n    def _impurity(self, y):\n        return self._gini(y) if self.criterion == 'gini' else self._entropy(y)\n\n    def _best_split(self, X, y):\n        best_gain, best_feat, best_thr = 0, None, None\n        parent_imp = self._impurity(y)\n        n = X.shape[1]\n\n        for feat in range(n):\n            values = np.unique(X[:, feat])\n            if len(values) == 1:\n                continue\n            thresholds = (values[:-1] + values[1:]) / 2\n            for thr in thresholds:\n                left = y[X[:, feat] <= thr]\n                right = y[X[:, feat] > thr]\n                if len(left) == 0 or len(right) == 0:\n                    continue\n                child_imp = (len(left)*self._impurity(left) + len(right)*self._impurity(right)) / len(y)\n                gain = parent_imp - child_imp\n                if gain > best_gain:\n                    best_gain, best_feat, best_thr = gain, feat, thr\n        return best_feat, best_thr, best_gain\n\n    def _build(self, X, y, depth):\n        node = Node(depth)\n        if len(np.unique(y)) == 1 or (self.max_depth and depth >= self.max_depth) or len(y) < self.min_samples_split:\n            node.is_leaf = True\n            node.label = Counter(y).most_common(1)[0][0]\n            return node\n\n        feat, thr, gain = self._best_split(X, y)\n        if feat is None:\n            node.is_leaf = True\n            node.label = Counter(y).most_common(1)[0][0]\n            return node\n\n        node.feature = feat\n        node.threshold = thr\n\n        left_mask = X[:, feat] <= thr\n        right_mask = X[:, feat] > thr\n        node.left = self._build(X[left_mask], y[left_mask], depth + 1)\n        node.right = self._build(X[right_mask], y[right_mask], depth + 1)\n        return node\n\n    def fit(self, X, y):\n        self.root = self._build(np.array(X), np.array(y), 0)\n\n    def _predict_one(self, x, node):\n        if node.is_leaf:\n            return node.label\n        if x[node.feature] <= node.threshold:\n            return self._predict_one(x, node.left)\n        else:\n            return self._predict_one(x, node.right)\n\n    def predict(self, X):\n        return np.array([self._predict_one(x, self.root) for x in np.array(X)])\n","block_group":"d5e9053620ff44c0be1076bae194fd49","execution_count":13,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"aac2b4879c0549bba1cfe11b47478b2f","cell_type":"code","metadata":{"source_hash":"da3a95b9","execution_start":1760524920524,"execution_millis":10,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"aac2b4879c0549bba1cfe11b47478b2f","deepnote_cell_type":"code"},"source":"#Obejctive 4\ndef reduced_error_pruning(tree, X_val, y_val):\n    base_acc = accuracy_score(y_val, tree.predict(X_val))\n    improved = True\n\n    def get_internal_nodes(node):\n        nodes = []\n        def dfs(n):\n            if n and not n.is_leaf:\n                nodes.append(n)\n                dfs(n.left)\n                dfs(n.right)\n        dfs(node)\n        return nodes\n\n    while improved:\n        improved = False\n        nodes = get_internal_nodes(tree.root)\n        for n in nodes:\n            backup = (n.feature, n.threshold, n.left, n.right, n.is_leaf, n.label)\n            n.is_leaf = True\n            n.left, n.right = None, None\n            n.label = Counter(y_train).most_common(1)[0][0]\n\n            new_acc = accuracy_score(y_val, tree.predict(X_val))\n            if new_acc >= base_acc:\n                base_acc = new_acc\n                improved = True\n            else:\n                n.feature, n.threshold, n.left, n.right, n.is_leaf, n.label = backup\n","block_group":"55709d8878f3463e850c8a8555b8ddea","execution_count":14,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"ddb4f10ff36b45419de413dd56d25bf3","cell_type":"code","metadata":{"source_hash":"2b6f6d9e","execution_start":1760524920599,"execution_millis":35015,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"ddb4f10ff36b45419de413dd56d25bf3","deepnote_cell_type":"code"},"source":"#Objective 5\nmodel = DecisionTreeScratch(criterion='gini', max_depth=6, min_samples_split=5)\nmodel.fit(X_train, y_train)","block_group":"f8815870a0504981a49e0f134b0f19a7","execution_count":15,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"33c6798d3b6446dda3de6bdc5ffc294c","cell_type":"code","metadata":{"source_hash":"c4a0155","execution_start":1760524955667,"execution_millis":94,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"33c6798d3b6446dda3de6bdc5ffc294c","deepnote_cell_type":"code"},"source":"train_preds = model.predict(X_train)\nval_preds = model.predict(X_val)","block_group":"5941296d319e434caf1313629245239a","execution_count":16,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"c8c63a5221054fab9f87039890bb3f22","cell_type":"code","metadata":{"source_hash":"30291648","execution_start":1760524955834,"execution_millis":0,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"c8c63a5221054fab9f87039890bb3f22","deepnote_cell_type":"code"},"source":"print('Train Accuracy:', accuracy_score(y_train, train_preds))\nprint('Val Accuracy:', accuracy_score(y_val, val_preds))\nprint('\\nClassification Report (Validation):')\nprint(classification_report(y_val, val_preds))","block_group":"389c3148e09c4780ba740d0cabcda25b","execution_count":17,"outputs":[{"name":"stdout","text":"Train Accuracy: 0.5867982640347194\nVal Accuracy: 0.5793784124317514\n\nClassification Report (Validation):\n              precision    recall  f1-score   support\n\n           0       0.59      0.95      0.73      4944\n           1       0.00      0.00      0.00      2272\n           2       0.53      0.51      0.52      1568\n           3       0.29      0.02      0.04       740\n\n    accuracy                           0.58      9524\n   macro avg       0.35      0.37      0.32      9524\nweighted avg       0.42      0.58      0.47      9524\n\n/root/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/root/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/root/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}],"outputs_reference":"s3:deepnote-cell-outputs-production/cd773c42-715f-4cb7-8922-e33a289a590a","content_dependencies":null},{"cellId":"d1af2c6b1d19426ea01ed7de519cc42c","cell_type":"code","metadata":{"source_hash":"cd670f5f","execution_start":1760524955895,"execution_millis":2260,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"d1af2c6b1d19426ea01ed7de519cc42c","deepnote_cell_type":"code"},"source":"print('Validation accuracy before pruning:', accuracy_score(y_val, model.predict(X_val)))\nreduced_error_pruning(model, X_val, y_val)\nprint('Validation accuracy after pruning:', accuracy_score(y_val, model.predict(X_val)))","block_group":"7652a87bc29847cc9a513a60aa7687b5","execution_count":18,"outputs":[{"name":"stdout","text":"Validation accuracy before pruning: 0.5793784124317514\nValidation accuracy after pruning: 0.5794834103317934\n","output_type":"stream"}],"outputs_reference":"dbtable:cell_outputs/77247c1f-3954-4b01-81c7-72a303bcadc5","content_dependencies":null},{"cellId":"c1898015f1a145178fb14a616e53c99d","cell_type":"code","metadata":{"source_hash":"602c011d","execution_start":1760524958209,"execution_millis":0,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"c1898015f1a145178fb14a616e53c99d","deepnote_cell_type":"code"},"source":"#Objective 6","block_group":"b2e4e651d907447e83f78f114369b15a","execution_count":19,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"41fac45113cb4e8ebd48adbbea22e119","cell_type":"code","metadata":{"source_hash":"5f001edf","execution_start":1760524958265,"execution_millis":1,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"41fac45113cb4e8ebd48adbbea22e119","deepnote_cell_type":"code"},"source":"def evaluate_model(model, X, y):\n    preds = model.predict(X)\n    print(\"Accuracy:\", accuracy_score(y, preds))\n    print(\"Precision:\", precision_score(y, preds, average='weighted'))\n    print(\"Recall:\", recall_score(y, preds, average='weighted'))\n    print(\"F1 Score:\", f1_score(y, preds, average='weighted'))\n    print(\"Confusion Matrix:\\n\", confusion_matrix(y, preds))","block_group":"879ee5eb98f441978f030fdc1f36039d","execution_count":20,"outputs":[],"outputs_reference":null,"content_dependencies":null},{"cellId":"1fa7ba212c994a39a3b6d0e35dbb706b","cell_type":"code","metadata":{"source_hash":"a5be4970","execution_start":1760524958324,"execution_millis":210745,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"1fa7ba212c994a39a3b6d0e35dbb706b","deepnote_cell_type":"code"},"source":"# Compare across depths\nfor depth in [2, 4, 6, None]:\n    print(f\"\\n--- Depth = {depth} ---\")\n    model = DecisionTreeScratch(max_depth=depth, min_samples_split=5)\n    model.fit(X_train, y_train)\n    evaluate_model(model, X_val, y_val)\n\n# Compare Gini vs Entropy\nfor crit in ['gini', 'entropy']:\n    print(f\"\\n--- Criterion = {crit} ---\")\n    model = DecisionTreeScratch(criterion=crit, max_depth=6)\n    model.fit(X_train, y_train)\n    evaluate_model(model, X_val, y_val)\n\n","block_group":"3db8d523fcda40c69302582e04bef796","execution_count":21,"outputs":[{"name":"stdout","text":"\n--- Depth = 2 ---\nAccuracy: 0.5638387232255355\nPrecision: 0.38128518738036454\nRecall: 0.5638387232255355\nF1 Score: 0.44706769434036286\nConfusion Matrix:\n [[4711    0  233    0]\n [2173    0   99    0]\n [ 909    0  659    0]\n [ 447    0  293    0]]\n\n--- Depth = 4 ---\n/root/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\nAccuracy: 0.5743385132297354\nPrecision: 0.4125335485511425\nRecall: 0.5743385132297354\nF1 Score: 0.4621982677216988\nConfusion Matrix:\n [[4629    0  314    1]\n [2142    0  130    0]\n [ 720    0  835   13]\n [ 359    0  375    6]]\n\n--- Depth = 6 ---\n/root/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\nAccuracy: 0.5793784124317514\nPrecision: 0.4161511720301817\nRecall: 0.5793784124317514\nF1 Score: 0.467306356945152\nConfusion Matrix:\n [[4706    0  238    0]\n [2164    0  108    0]\n [ 729    0  794   45]\n [ 359    0  363   18]]\n\n--- Depth = None ---\n/root/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\nAccuracy: 0.46640067198656027\nPrecision: 0.46435424942925146\nRecall: 0.46640067198656027\nF1 Score: 0.46531701225183536\nConfusion Matrix:\n [[3040 1334  383  187]\n [1367  646  171   88]\n [ 438  189  627  314]\n [ 182  112  317  129]]\n\n--- Criterion = gini ---\nAccuracy: 0.5792734145317093\nPrecision: 0.4157525976042148\nRecall: 0.5792734145317093\nF1 Score: 0.46722249979626534\nConfusion Matrix:\n [[4706    0  238    0]\n [2164    0  108    0]\n [ 729    0  793   46]\n [ 359    0  363   18]]\n\n--- Criterion = entropy ---\n/root/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\nAccuracy: 0.5821083578328433\nPrecision: 0.4210562133714297\nRecall: 0.5821083578328433\nF1 Score: 0.4692352249541762\nConfusion Matrix:\n [[4707    0  237    0]\n [2166    0  106    0]\n [ 716    0  823   29]\n [ 356    0  370   14]]\n/root/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}],"outputs_reference":"s3:deepnote-cell-outputs-production/85af06f2-d49b-4ee2-9b1b-a424ff22eb70","content_dependencies":null},{"cellId":"827ef36811334ab1a400031ca10a8f50","cell_type":"code","metadata":{"source_hash":"ae4571b5","execution_start":1760525169196,"execution_millis":113,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"827ef36811334ab1a400031ca10a8f50","deepnote_cell_type":"code"},"source":"sk_model = SklearnTree(criterion='gini', max_depth=6, random_state=42)\nsk_model.fit(X_train, y_train)","block_group":"ea097f81354545b581882d2ef51eaf44","execution_count":22,"outputs":[{"output_type":"execute_result","execution_count":22,"data":{"text/plain":"DecisionTreeClassifier(max_depth=6, random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=6, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=6, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"outputs_reference":"s3:deepnote-cell-outputs-production/a537446f-21ec-4e59-80b6-f846eee785fe","content_dependencies":null},{"cellId":"f069cebe8699489cbc565a758c2fece4","cell_type":"code","metadata":{"source_hash":"fe33a14a","execution_start":1760525169369,"execution_millis":18,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"f069cebe8699489cbc565a758c2fece4","deepnote_cell_type":"code"},"source":"print('Sklearn Test Accuracy:', accuracy_score(y_test, sk_model.predict(X_test)))\nprint('Scratch Test Accuracy:', accuracy_score(y_test, model.predict(X_test)))","block_group":"2214b880720d40fc8219f4df98766891","execution_count":23,"outputs":[{"name":"stdout","text":"Sklearn Test Accuracy: 0.5797375328083989\nScratch Test Accuracy: 0.5806824146981627\n","output_type":"stream"}],"outputs_reference":"dbtable:cell_outputs/937d24bf-03ff-4e4f-9131-64e8f2a2268c","content_dependencies":null},{"cellId":"9183882e9f0b4932aa4ef761d646044b","cell_type":"code","metadata":{"source_hash":"b623e53d","execution_start":1760525169454,"execution_millis":0,"execution_context_id":"ccaef91c-f2ac-4527-b0ea-e3bf71e70917","cell_id":"9183882e9f0b4932aa4ef761d646044b","deepnote_cell_type":"code"},"source":"","block_group":"a82d492c53204a8fbe299403b991bf28","execution_count":24,"outputs":[],"outputs_reference":null,"content_dependencies":null}],
        "metadata": {"deepnote_notebook_id":"629628efced2476f914e99f750f28153"},
        "nbformat": "4",
        "nbformat_minor": "0",
        "version": "0"
      }